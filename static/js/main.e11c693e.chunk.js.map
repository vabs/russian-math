{"version":3,"sources":["components/iteration/iteration.jsx","components/logger/index.jsx","App.js","home.js","serviceWorker.js","index.js"],"names":["Iteration","props","Grid","container","justify","spacing","className","shadow","item","TextField","disabled","variant","type","value","left","right","Logger","Box","bgcolor","color","m","p","textAlign","display","log","App","useState","iterations","setIteration","logs","setLogs","setLeftValue","setRightValue","timeoutId","setTimeoutId","leftRef","useRef","current","rightRef","timeoutRef","iterationsRef","logsRef","currentValues","tempIterations","tempLogs","reset","clearTimeout","_handleTextFieldChange","e","target","id","addLog","slice","push","xs","Typography","component","gutterBottom","onChange","Button","onClick","setInterval","length","key","shortid","generate","Number","parseInt","console","map","iteration","setTimeout","href","i","Home","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e11c693e.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport TextField from '@material-ui/core/TextField';\n\nimport './style.css'\n\nconst Iteration = (props) => {\n  return (\n    <Grid container justify=\"center\" spacing={1} className={`pi ${props.shadow ? 'shadow' : ''}`}>\n      <Grid item>\n        <TextField disabled variant=\"outlined\" type=\"text\" value={props.left}\n          className={`${props.left === 'ANS:' ? 'answer' : 'left'}`} />\n      </Grid>\n      <Grid item>\n        <TextField disabled variant=\"outlined\" type=\"text\" value={props.right}\n          className={`${props.left === 'ANS:' ? 'answer' : 'right'}`} />\n      </Grid>\n  </Grid>\n  )\n}\n\nexport default Iteration;\n","import React from \"react\";\nimport Box from '@material-ui/core/Box';\n\nconst Logger = (props) => {\n    return (\n        <Box bgcolor=\"success.main\" \n            color=\"primary.contrastText\" \n            m={2} \n            p={2}\n            textAlign=\"left\"\n            className=\"pi\"\n            display=\"block\"\n        >\n          {props.log}\n        </Box>\n    )\n}\n\nexport default Logger;","import React, { useState, useRef } from \"react\";\nimport shortid from \"shortid\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from '@material-ui/core/Typography';\n\nimport \"./App.css\";\nimport Iteration from \"./components/iteration/iteration\";\nimport Logger from \"./components/logger/index\";\n\nconst App = () => {\n  const [iterations, setIteration] = useState([]);\n  const [logs, setLogs] = useState([]);\n  const [left, setLeftValue] = useState(9);\n  const [right, setRightValue] = useState(13);\n  const [timeoutId, setTimeoutId] = useState(null);\n\n  const leftRef = useRef(left);\n  leftRef.current = left;\n  const rightRef = useRef(right);\n  rightRef.current = right;\n  const timeoutRef = useRef(timeoutId);\n  timeoutRef.current = timeoutId;\n  const iterationsRef = useRef(iterations);\n  iterationsRef.current = iterations;\n  const logsRef = useRef(logs);\n  logsRef.current = logs;\n\n  \n  let currentValues = {};\n  let tempIterations = [];\n  let tempLogs = [];\n\n  function reset() {\n    setIteration([]);\n    if(timeoutId != null || timeoutRef.current != null) {\n      clearTimeout(timeoutRef.current);\n      setTimeoutId(null);\n    }\n    setLogs([]);\n  }\n  \n  function _handleTextFieldChange(e) {\n    reset();\n    e.target.id === \"left\"\n      ? setLeftValue(e.target.value)\n      : setRightValue(e.target.value);\n  }\n\n  function calculate() {\n    reset()\n    setTimeoutId(setInterval(() => {\n      if(iterationsRef.current.length === 0) {\n        tempIterations.push({\n          left: leftRef.current, \n          right: rightRef.current\n        });\n        setIteration(tempIterations);\n        addLog(\"Start Calculating!\");\n        addLog([\n          <strong key={shortid.generate()}>Half</strong>, \n          \" the left value. \",\n          <strong key={shortid.generate()}>Double</strong>,\n          \" the right value.\"]);\n      } else {\n        tempIterations = iterationsRef.current.slice();\n        currentValues = tempIterations[tempIterations.length - 1];\n        if(Number.parseInt(currentValues.left / 2) === 0) {\n          clearTimeout(timeoutRef.current);\n          console.log('DONE!', iterationsRef)\n          disableEvenIterations();\n        } else {\n          tempIterations.push({\n            left: Number.parseInt(currentValues.left / 2),\n            right: currentValues.right * 2\n          });\n          setIteration(tempIterations);\n        }\n      }\n    }, 1000));\n  }\n\n  function disableEvenIterations() {\n    tempIterations = iterationsRef.current.slice();\n    tempIterations.map(iteration => {\n      if(iteration.left % 2 === 0) {\n        iteration.shadow = true;\n      }\n    });\n    setIteration(tempIterations);\n    addLog([<strong key={shortid.generate()}>Remove</strong>, \" all left even valued rows\"]);\n    setTimeout(() =>{\n      addLog([<strong key={shortid.generate()}>Add</strong>, \" all the remaining right columns.\"])\n      setFinalAnswer();\n    }, 1000);\n    setTimeout(() =>{\n      addLog([\n        'For more explanation see: ', \n        <a key={shortid.generate()} href=\"https://www.youtube.com/watch?v=HJ_PP5rqLg0\">\n        https://www.youtube.com/watch?v=HJ_PP5rqLg0</a>\n      ])\n    }, 2500);\n  }\n\n  function setFinalAnswer() {\n    tempIterations = iterationsRef.current.slice();\n    tempIterations.push({\n      left: 'ANS:',\n      right: left * right\n    });\n    setIteration(tempIterations);\n  }\n\n  function addLog(log) {\n    tempLogs = logsRef.current.slice()\n    tempLogs.push(log);\n    setLogs(tempLogs);\n  }\n\n  return (\n    <div className=\"App\">\n      <Grid container justify=\"center\">\n        <Grid item xs={12}>\n          <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n            Russian Maths\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container>\n        <Grid item xs={6}>\n            <Grid container justify=\"center\" spacing={2}>\n              <Grid item>\n                <TextField\n                  id=\"left\"\n                  variant=\"outlined\"\n                  type=\"number\"\n                  value={left}\n                  onChange={_handleTextFieldChange}\n                />\n              </Grid>\n              <Grid item className=\"mt\">\n                X\n              </Grid>\n              <Grid item>\n                <TextField\n                  id=\"right\"\n                  variant=\"outlined\"\n                  type=\"number\"\n                  value={right}\n                  onChange={_handleTextFieldChange}\n                />\n              </Grid>\n            </Grid>\n            <Grid container justify=\"center\" className=\"pi\">\n              <Grid item>\n                <Button variant=\"contained\" onClick={calculate}>\n                  calculate\n                </Button>\n              </Grid>\n            </Grid>\n              {iterationsRef.current.map((iteration, i) => \n                  <Iteration key={i} {...iteration} />\n              )}\n        </Grid>\n        <Grid item xs={5}>\n          {logsRef.current.map((log, i) =>\n            <Logger key={i} log={log}></Logger>\n          )}\n        </Grid>\n      </Grid>\n\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport {\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport App from './App';\n\nfunction Home() {\n  return (\n    <div>\n      <Switch>\n        {/* If the current URL is /about, this route is rendered\n            while the rest are ignored */}      \n        {/* If none of the previous routes render anything,\n            this route acts as a fallback.\n\n            Important: A route with path=\"/\" will *always* match\n            the URL because all URLs begin with a /. So that's\n            why we put this one last of all */}\n        <Route path=\"/\">\n          <App />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './home';\nimport * as serviceWorker from './serviceWorker';\n\nimport {\n    BrowserRouter as Router,\n  } from \"react-router-dom\";\n\n// ReactDOM.render(<Home />, document.getElementById('root'));\nReactDOM.render(\n    <Router>\n      <Home />\n    </Router>,\n    document.getElementById(\"root\")\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}